import express from 'express';
import cors from 'cors';
import axios from 'axios';
import { google } from 'googleapis';
import config from './config.js';
import { PromptManager } from '../utils/promptManager.js';
import { PromptSecurity } from '../utils/promptSecurity.js';
import { PromptMonitoring } from '../utils/promptMonitoring.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// Middleware
app.use(cors(config.cors));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
const getSystemPrompt = (req, res, next) => {
  const promptId = req.headers['x-prompt-id'] || 'JKU_ASSISTANT';
  const prompt = promptManager.setPrompt(promptId);
  
  if (!prompt) {
    return res.status(400).json({ 
      error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–º–ø—Ç–∞',
      availablePrompts: promptManager.getAvailablePrompts()
    });
  }
  
  req.systemPrompt = promptManager.getCurrentPrompt();
  next();
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${req.method} ${req.path} - ${req.ip}`);
  next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
let sheets;
let auth;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–ø—Ç–æ–≤
const promptManager = new PromptManager();
const promptMonitoring = new PromptMonitoring();

async function initializeGoogleSheets() {
  try {
    auth = new google.auth.GoogleAuth({
      credentials: config.googleSheets.credentials,
      scopes: config.googleSheets.scopes
    });

    sheets = google.sheets({ version: 'v4', auth });
    console.log('‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function getMoscowTime() {
  const now = new Date();
  const moscowTime = new Date(now.toLocaleString("en-US", {timeZone: "Europe/Moscow"}));
  return moscowTime.toISOString().replace('T', ' ').substring(0, 19);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
async function logToGoogleSheets(promptCount, question, answer) {
  if (!sheets) {
    console.warn('‚ö†Ô∏è Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
    return;
  }

  try {
    const timestamp = getMoscowTime();
    
    const values = [
      [timestamp, promptCount, question, answer]
    ];

    await sheets.spreadsheets.values.append({
      spreadsheetId: config.googleSheets.sheetId,
      range: 'A:D',
      valueInputOption: 'RAW',
      resource: {
        values: values
      }
    });

    console.log(`üìä –ó–∞–ø–∏—Å—å –≤ Google Sheets: ${timestamp} - –í–æ–ø—Ä–æ—Å ${promptCount}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:', error.message);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini API
async function generateGeminiResponse(message, systemPrompt) {
  try {
    const startTime = Date.now();
    
    const requestBody = {
      contents: [{
        parts: [{
          text: `${systemPrompt.prompt}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}`
        }]
      }],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };

    const response = await axios.post(
      `${config.gemini.baseUrl}?key=${config.gemini.apiKey}`,
      requestBody,
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: config.gemini.timeout
      }
    );

    if (response.data && response.data.candidates && response.data.candidates[0]) {
      const candidate = response.data.candidates[0];
      if (candidate.content && candidate.content.parts && candidate.content.parts[0]) {
        const responseTime = Date.now() - startTime;
        const success = true;
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        promptMonitoring.trackPromptUsage(systemPrompt.id, responseTime, success);
        
        return candidate.content.parts[0].text;
      }
    }

    throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Gemini API:', error.message);
    
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
    const responseTime = Date.now() - startTime;
    const success = false;
    promptMonitoring.trackPromptUsage(systemPrompt.id, responseTime, success);
    
    throw error;
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function validateRequest(body) {
  const errors = [];

  if (!body.message) {
    errors.push('–ü–æ–ª–µ "message" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  } else if (typeof body.message !== 'string') {
    errors.push('–ü–æ–ª–µ "message" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
  } else if (body.message.length < config.validation.minMessageLength) {
    errors.push(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${config.validation.minMessageLength} —Å–∏–º–≤–æ–ª`);
  } else if (body.message.length > config.validation.maxMessageLength) {
    errors.push(`–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${config.validation.maxMessageLength} —Å–∏–º–≤–æ–ª–æ–≤`);
  }

  if (body.promptcount !== undefined) {
    if (typeof body.promptcount !== 'number' || !Number.isInteger(body.promptcount)) {
      errors.push('–ü–æ–ª–µ "promptcount" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º');
    } else if (body.promptcount < 1 || body.promptcount > config.validation.maxPromptCount) {
      errors.push(`–ü–æ–ª–µ "promptcount" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ ${config.validation.maxPromptCount}`);
    }
  }

  return errors;
}

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
app.get('/api/prompts', (req, res) => {
  res.json({
    current: promptManager.getCurrentPrompt(),
    available: promptManager.getAvailablePrompts(),
    history: promptManager.getPromptHistory()
  });
});

// Endpoint –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ–º–ø—Ç–∞
app.post('/api/prompts/switch', (req, res) => {
  const { promptId } = req.body;
  const success = promptManager.setPrompt(promptId);
  
  if (success) {
    res.json({ 
      success: true, 
      currentPrompt: promptManager.getCurrentPrompt() 
    });
  } else {
    res.status(400).json({ 
      success: false, 
      error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
    });
  }
});

// Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
app.post('/api/prompts/custom', (req, res) => {
  const { id, name, description, prompt } = req.body;
  
  const validation = promptManager.validatePrompt(prompt);
  if (!validation.isValid) {
    return res.status(400).json({ 
      success: false, 
      errors: validation.issues 
    });
  }
  
  const customPrompt = promptManager.createCustomPrompt(id, name, description, prompt);
  res.json({ success: true, prompt: customPrompt });
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
app.get('/api/prompts/stats', (req, res) => {
  res.json({
    metrics: promptMonitoring.getAllMetrics(),
    currentPrompt: promptManager.getCurrentPrompt()
  });
});

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞
app.post('/api/chat', getSystemPrompt, async (req, res) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    const validationErrors = validateRequest(req.body);
    if (validationErrors.length > 0) {
      return res.status(400).json({
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: validationErrors
      });
    }

    const { message, promptcount = 1 } = req.body;
    const systemPrompt = req.systemPrompt;
    
    console.log(`üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è #${promptcount} —Å –ø—Ä–æ–º–ø—Ç–æ–º ${systemPrompt.id}: ${message.substring(0, 50)}...`);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    const aiResponse = await generateGeminiResponse(message, systemPrompt);
    
    console.log(`ü§ñ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${aiResponse.substring(0, 50)}...`);

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ Google Sheets (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç)
    logToGoogleSheets(promptcount, message, aiResponse).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', error.message);
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    res.json({
      reply: aiResponse
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ fallback –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const fallbackResponse = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.';
    
    res.status(500).json({
      reply: fallbackResponse,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    services: {
      gemini: config.gemini.apiKey ? 'configured' : 'not_configured',
      googleSheets: sheets ? 'connected' : 'not_connected'
    }
  });
});

// Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets
app.post('/api/test-sheets', async (req, res) => {
  try {
    if (!sheets) {
      return res.status(500).json({ error: 'Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
    }

    await logToGoogleSheets(999, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç');
    res.json({ message: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ Google Sheets —É—Å–ø–µ—à–Ω–∞' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
    availableEndpoints: [
      'POST /api/chat',
      'GET /api/health',
      'POST /api/test-sheets'
    ]
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'development' ? error.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
    await initializeGoogleSheets();
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = app.listen(config.port, () => {
      console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
      console.log(`üìç –ü–æ—Ä—Ç: ${config.port}`);
      console.log(`üåê URL: http://localhost:${config.port}`);
      console.log(`üí¨ Chat API: http://localhost:${config.port}/api/chat`);
      console.log(`‚ù§Ô∏è Health Check: http://localhost:${config.port}/api/health`);
      console.log('‚îÄ'.repeat(50));
    });

    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
      });
    });

    process.on('SIGINT', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
      });
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startServer();
