const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const API_BASE_URL = 'http://localhost:5002';
const TEST_MESSAGES = [
  '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
  '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—ç—à–±—ç–∫',
  '–ö–∞–∫–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏?',
  '–ö–∞–∫ –Ω–∞–∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã?',
  '**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏ *–∫—É—Ä—Å–∏–≤* - —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è health check
async function testHealthCheck() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...');
    const response = await axios.get(`${API_BASE_URL}/api/health`);
    console.log('‚úÖ Health check —É—Å–ø–µ—à–µ–Ω:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå Health check failed:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
async function testChat(message, promptCount = 1) {
  try {
    console.log(`üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ ${promptCount}): ${message.substring(0, 50)}...`);
    
    const response = await axios.post(`${API_BASE_URL}/api/chat`, {
      message: message,
      promptcount: promptCount
    }, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${response.data.reply.substring(0, 100)}...`);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞:', error.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets
async function testGoogleSheets() {
  try {
    console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets...');
    const response = await axios.post(`${API_BASE_URL}/api/test-sheets`);
    console.log('‚úÖ Google Sheets —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå Google Sheets —Ç–µ—Å—Ç failed:', error.response?.data || error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
async function testValidation() {
  console.log('üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
  
  const invalidRequests = [
    { data: {}, expected: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message' },
    { data: { message: '' }, expected: '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
    { data: { message: 'a'.repeat(1001) }, expected: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
    { data: { message: 'test', promptcount: 'invalid' }, expected: '–ù–µ–≤–µ—Ä–Ω—ã–π promptcount' },
    { data: { message: 'test', promptcount: -1 }, expected: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π promptcount' }
  ];

  for (const test of invalidRequests) {
    try {
      await axios.post(`${API_BASE_URL}/api/chat`, test.data);
      console.log(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è: ${test.expected}`);
    } catch (error) {
      if (error.response?.status === 400) {
        console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è: ${test.expected}`);
      } else {
        console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è: ${test.expected} - ${error.message}`);
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function testPerformance() {
  console.log('‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
  
  const startTime = Date.now();
  const promises = [];
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  for (let i = 0; i < 5; i++) {
    promises.push(testChat(`–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ${i + 1}`, i + 1));
  }
  
  const results = await Promise.all(promises);
  const endTime = Date.now();
  const duration = endTime - startTime;
  
  const successCount = results.filter(r => r !== null).length;
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:`);
  console.log(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
  console.log(`   - –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successCount}/5`);
  console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${Math.round(duration / 5)}ms`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API...\n');
  
  // 1. Health check
  const healthOk = await testHealthCheck();
  if (!healthOk) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤');
    return;
  }
  
  console.log('');
  
  // 2. –¢–µ—Å—Ç Google Sheets
  await testGoogleSheets();
  console.log('');
  
  // 3. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  await testValidation();
  console.log('');
  
  // 4. –¢–µ—Å—Ç —á–∞—Ç–∞
  console.log('üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞...');
  for (let i = 0; i < TEST_MESSAGES.length; i++) {
    await testChat(TEST_MESSAGES[i], i + 1);
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  console.log('');
  
  // 5. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  await testPerformance();
  console.log('');
  
  console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
}

module.exports = {
  testHealthCheck,
  testChat,
  testGoogleSheets,
  testValidation,
  testPerformance,
  runTests
};
