// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JavaScript —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ script.js –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–º–ø—Ç–æ–≤

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const CONFIG = {
    MAX_MESSAGES: 50, // –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
    TYPING_DELAY: 1000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
    RESPONSE_DELAY: 1500, // –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò
    MESSAGE_LIMIT: 1000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    API_BASE_URL: 'http://localhost:5002', // URL backend —Å–µ—Ä–≤–µ—Ä–∞
    REQUEST_TIMEOUT: 30000 // –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º—Å
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let messageCount = 0;
let isTyping = false;
let isLimitReached = false;
let currentPrompt = null;
let promptSelector = null;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');
const limitPage = document.getElementById('limitPage');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    addWelcomeMessage();
    checkBackendHealth();
    initializePromptSelector();
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    trackEvent('page_view');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
function initializePromptSelector() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
    const promptContainer = document.createElement('div');
    promptContainer.id = 'promptSelectorContainer';
    promptContainer.style.cssText = `
        position: fixed;
        top: 10px;
        left: 10px;
        right: 10px;
        z-index: 1000;
        max-width: 400px;
        margin: 0 auto;
    `;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –Ω–∞—á–∞–ª–æ body
    document.body.insertBefore(promptContainer, document.body.firstChild);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
    promptSelector = new PromptSelector('promptSelectorContainer', handlePromptChange);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø—Ä–æ–º–ø—Ç–∞
function handlePromptChange(promptId, prompt) {
    console.log('–ü—Ä–æ–º–ø—Ç –∏–∑–º–µ–Ω–µ–Ω:', promptId, prompt);
    currentPrompt = prompt;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    updateWelcomeMessage(prompt);
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    trackEvent('prompt_changed', {
        prompt_id: promptId,
        prompt_name: prompt.name,
        question_count: messageCount
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function updateWelcomeMessage(prompt) {
    if (!prompt) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const oldWelcome = document.querySelector('.welcome-message');
    if (oldWelcome) {
        oldWelcome.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeText = `–†–µ–∂–∏–º: ${prompt.name}\n\n${prompt.description}`;
    addMessage('ai', welcomeText, 'welcome-message');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend
async function checkBackendHealth() {
    try {
        const response = await fetch(`${CONFIG.API_BASE_URL}/api/health`, {
            method: 'GET',
            timeout: 5000
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Backend –ø–æ–¥–∫–ª—é—á–µ–Ω:', data);
            showConnectionStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ backend');
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤:', error.message);
        showConnectionStatus('disconnected', '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    }
}

// –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function showConnectionStatus(status, message) {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
    let statusIndicator = document.getElementById('connectionStatus');
    if (!statusIndicator) {
        statusIndicator = document.createElement('div');
        statusIndicator.id = 'connectionStatus';
        statusIndicator.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            z-index: 1000;
            transition: all 0.3s ease;
        `;
        document.body.appendChild(statusIndicator);
    }
    
    if (status === 'connected') {
        statusIndicator.style.backgroundColor = '#4CAF50';
        statusIndicator.style.color = 'white';
        statusIndicator.textContent = `üü¢ ${message}`;
    } else {
        statusIndicator.style.backgroundColor = '#FF9800';
        statusIndicator.style.color = 'white';
        statusIndicator.textContent = `üü° ${message}`;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (statusIndicator) {
            statusIndicator.style.opacity = '0.7';
        }
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    messageInput.focus();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≤—ã—Å–æ—Ç—ã
    setupResponsiveHeight();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    handleMobileKeyboard();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Enter
    messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
    sendButton.addEventListener('click', sendMessage);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
    messageInput.addEventListener('input', function() {
        const hasText = this.value.trim().length > 0;
        sendButton.disabled = !hasText || isLimitReached;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ–ª—è –≤–≤–æ–¥–∞
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 120) + 'px';
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', setupResponsiveHeight);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
            trackEvent('page_hidden');
        } else {
            trackEvent('page_visible');
        }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function addWelcomeMessage() {
    const welcomeText = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –º–µ–Ω—é –≤—ã—à–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
‚Ä¢ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ - –ø–æ–º–æ—â—å –ø–æ –ª–∏—á–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–∞–º
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –û–±—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
‚Ä¢ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ - –∫—ç—à–±—ç–∫ –∏ –±–∞–ª–ª—ã`;
    
    addMessage('ai', welcomeText, 'welcome-message');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    const messageText = messageInput.value.trim();
    
    if (!messageText || isLimitReached) {
        return;
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage('user', messageText);
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
    messageInput.value = '';
    messageInput.style.height = 'auto';
    sendButton.disabled = true;
    
    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    messageCount++;
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    trackEvent('click_send', { 
        message_length: messageText.length,
        prompt_id: currentPrompt?.id || 'unknown'
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if (messageCount >= CONFIG.MAX_MESSAGES) {
        showLimitPage();
        return;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç backend –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    await getAIResponse(messageText);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
async function getAIResponse(userMessage) {
    if (isTyping) return;
    
    isTyping = true;
    
    // –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
    setTimeout(() => {
        showTypingIndicator();
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç backend
        getBackendResponse(userMessage)
            .then(response => {
                hideTypingIndicator();
                addMessage('ai', response);
                isTyping = false;
                
                // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞
                trackPromptEffectiveness(currentPrompt?.id, response.length);
            })
            .catch(error => {
                console.warn('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:', error.message);
                hideTypingIndicator();
                const localResponse = generateLocalResponse(userMessage);
                addMessage('ai', localResponse);
                isTyping = false;
            });
    }, CONFIG.TYPING_DELAY);
}

// –ó–∞–ø—Ä–æ—Å –∫ backend API —Å –ø—Ä–æ–º–ø—Ç–æ–º
async function getBackendResponse(message) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), CONFIG.REQUEST_TIMEOUT);
    
    try {
        const headers = {
            'Content-Type': 'application/json',
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å ID –ø—Ä–æ–º–ø—Ç–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
        if (currentPrompt) {
            headers['X-Prompt-ID'] = currentPrompt.id;
        }
        
        const response = await fetch(`${CONFIG.API_BASE_URL}/api/chat`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                message: message,
                promptcount: messageCount
            }),
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (!data.reply) {
            throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        return data.reply;
        
    } catch (error) {
        clearTimeout(timeoutId);
        throw error;
    }
}

// –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ (fallback)
function generateLocalResponse(userMessage) {
    const responses = [
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞.",
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–±—ç–∫–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.",
        "–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –±–∞–Ω–∫–∞.",
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–µ.",
        "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
        "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.",
        "–ö—ç—à–±—ç–∫ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.",
        "–ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫–∏ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏–ª–∏ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –º–∏–ª–∏.",
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏—è—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."
    ];
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const message = userMessage.toLowerCase();
    
    if (message.includes('–∫—ç—à–±—ç–∫') || message.includes('cashback')) {
        return "–ö—ç—à–±—ç–∫ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∞—Ö —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –†–∞–∑–º–µ—Ä –∫—ç—à–±—ç–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç 1% –¥–æ 10% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏.";
    } else if (message.includes('–±–∞–ª–ª') || message.includes('–æ—á–∫')) {
        return "–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –±–∞–Ω–∫–∞. 1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å. –ë–∞–ª–ª—ã –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –Ω–∞ –º–∏–ª–∏.";
    } else if (message.includes('–ø–∞—Ä—Ç–Ω–µ—Ä') || message.includes('–º–∞–≥–∞–∑–∏–Ω')) {
        return "–£ –Ω–∞—Å –±–æ–ª–µ–µ 1000 –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –º–∞–≥–∞–∑–∏–Ω—ã, –∑–∞–ø—Ä–∞–≤–∫–∏, –∞–ø—Ç–µ–∫–∏ –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.";
    } else if (message.includes('–∞–∫—Ü–∏') || message.includes('–ø—Ä–µ–¥–ª–æ–∂–µ–Ω')) {
        return "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –±–∞–Ω–∫–∞.";
    } else if (message.includes('–ø–æ–º–æ—â—å') || message.includes('–ø–æ–¥–¥–µ—Ä–∂–∫')) {
        return "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 8 800 200-00-00 –∏–ª–∏ —á–µ—Ä–µ–∑ —á–∞—Ç –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.";
    } else {
        // –°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        return responses[Math.floor(Math.random() * responses.length)];
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(type, text, className = '') {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type} ${className}`;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    const formattedText = formatMessage(text);
    messageDiv.innerHTML = formattedText;
    
    chatMessages.appendChild(messageDiv);
    scrollToBottom();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    messageDiv.style.opacity = '0';
    messageDiv.style.transform = 'translateY(10px)';
    
    requestAnimationFrame(() => {
        messageDiv.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        messageDiv.style.opacity = '1';
        messageDiv.style.transform = 'translateY(0)';
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function formatMessage(text) {
    return text
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        .replace(/\*(.*?)\*/g, '<em>$1</em>') // –ö—É—Ä—Å–∏–≤
        .replace(/\n/g, '<br>') // –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        .replace(/^\- (.*$)/gm, '<li>$1</li>') // –°–ø–∏—Å–∫–∏
        .replace(/^(\d+)\. (.*$)/gm, '<li>$1. $2</li>'); // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
}

// –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
function showTypingIndicator() {
    const typingDiv = document.createElement('div');
    typingDiv.className = 'typing-indicator';
    typingDiv.id = 'typingIndicator';
    
    const promptName = currentPrompt ? currentPrompt.name : '–ò–ò';
    
    typingDiv.innerHTML = `
        <span>${promptName} –ø–µ—á–∞—Ç–∞–µ—Ç</span>
        <div class="typing-dots">
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        </div>
    `;
    
    chatMessages.appendChild(typingDiv);
    scrollToBottom();
}

// –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–∏–º–∏—Ç–∞
function showLimitPage() {
    isLimitReached = true;
    limitPage.style.display = 'flex';
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    trackEvent('limit_reached', { 
        message_count: messageCount,
        final_prompt_id: currentPrompt?.id || 'unknown'
    });
    
    // –°–∫—Ä—ã—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    document.querySelector('.app').style.display = 'none';
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
function scrollToBottom() {
    requestAnimationFrame(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≤—ã—Å–æ—Ç—ã
function setupResponsiveHeight() {
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function handleMobileKeyboard() {
    let initialViewportHeight = window.innerHeight;
    
    window.addEventListener('resize', () => {
        const currentHeight = window.innerHeight;
        const heightDifference = initialViewportHeight - currentHeight;
        
        // –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 150px, –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if (heightDifference > 150) {
            document.body.classList.add('keyboard-open');
            setTimeout(scrollToBottom, 300);
        } else {
            document.body.classList.remove('keyboard-open');
        }
    });
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
function trackPromptEffectiveness(promptId, responseLength) {
    if (!promptId) return;
    
    trackEvent('prompt_effectiveness', {
        prompt_id: promptId,
        response_length: responseLength,
        question_count: messageCount
    });
}

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
function trackEvent(eventName, parameters = {}) {
    // Google Analytics
    if (typeof gtag !== 'undefined') {
        gtag('event', eventName, parameters);
    }
    
    // Yandex.Metrika
    if (typeof ym !== 'undefined') {
        ym(12345678, 'reachGoal', eventName, parameters);
    }
    
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Event tracked:', eventName, parameters);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('Application error:', e.error);
    trackEvent('error', { 
        message: e.message, 
        filename: e.filename, 
        lineno: e.lineno 
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', function(e) {
    console.error('Unhandled promise rejection:', e.reason);
    trackEvent('unhandled_promise_rejection', { 
        reason: e.reason?.toString() || 'Unknown error' 
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        addMessage,
        formatMessage,
        generateLocalResponse,
        getBackendResponse,
        trackEvent,
        trackPromptEffectiveness
    };
}
